(function () {
'use strict';

function __$styleInject(css, returnValue) {
  if (typeof document === 'undefined') {
    return returnValue;
  }
  css = css || '';
  var head = document.head || document.getElementsByTagName('head')[0];
  var style = document.createElement('style');
  style.type = 'text/css';
  head.appendChild(style);
  
  if (style.styleSheet){
    style.styleSheet.cssText = css;
  } else {
    style.appendChild(document.createTextNode(css));
  }
  return returnValue;
}

function create(ctx, x, y, r) {
  var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "green";

  ctx.beginPath();
  ctx.arc(x, y, r, 0, Math.PI * 2, false);
  ctx.fillStyle = color;
  ctx.fill();
  ctx.closePath();
}

function clear(ctx) {
  ctx.clearRect(0, 0, 500, 500);
}

function stepx(x, dx, r) {
  if (x + dx > 500 - r || x + dx < r) {
    dx = -dx;
  }
  return dx;
}

function stepy(y, dy, r) {
  if (y + dy > 500 - r || y + dy < r) {
    dy = -dy;
  }
  return dy;
}

function transaction(ctx, move) {
  ctx.restore();

  for (var _len = arguments.length, args = Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
    args[_key - 2] = arguments[_key];
  }

  create.apply(undefined, [ctx].concat(args));
  move();
  ctx.save();
}

function xyrError(x, y, r) {
  if (typeof x === "Number" && typeof y === "Number" && typeof z === "Number") throw new Error("Must be Number");
  if (x < 0 || y < 0) throw new Error("Number must be Positive");
  if (x < r && y < r) throw new Error("Initial position error");
}

var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

// gb - good ball

var GB = function () {
  function GB(ctx) {
    var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 240;
    var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 160;
    var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;
    var hp = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 100;
    classCallCheck(this, GB);

    xyrError(x, y, r);
    this.gb_x = x;
    this.gb_y = y;
    this.gb_r = r;
    this.vx = 3;
    this.vy = -3;
    this.hp = hp;
    create(ctx, this.gb_x, this.gb_y, this.gb_r);
  }

  createClass(GB, [{
    key: "move",
    value: function move() {
      this.vx = stepx(this.gb_x, this.vx, this.gb_r);
      this.vy = stepy(this.gb_y, this.vy, this.gb_r);
      this.gb_x += this.vx;
      this.gb_y += this.vy;
    }
  }, {
    key: "render",
    value: function render(ctx) {
      transaction(ctx, this.move.bind(this), this.gb_x, this.gb_y, this.gb_r);
    }
  }]);
  return GB;
}();

// mp - magic power

// bb - bad ball


var BB = function () {
  function BB(ctx) {
    var x = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 240;
    var y = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 160;
    var r = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 10;
    var color = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "red";
    var hp = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 100;
    classCallCheck(this, BB);

    xyrError(x, y, r);
    this.bb_x = x;
    this.bb_y = y;
    this.bb_r = r;
    this.vx = -3;
    this.vy = 3;
    this.color = color;
    this.hp = hp;
    create(ctx, this.bb_x, this.bb_y, this.bb_r, this.color);
  }

  createClass(BB, [{
    key: "move",
    value: function move() {
      this.vx = stepx(this.bb_x, this.vx, this.bb_r);
      this.vy = stepy(this.bb_y, this.vy, this.bb_r);
      this.bb_x += this.vx;
      this.bb_y += this.vy;
    }
  }, {
    key: "render",
    value: function render(ctx) {
      transaction(ctx, this.move.bind(this), this.bb_x, this.bb_y, this.bb_r, this.color);
    }
  }, {
    key: "collision",
    value: function collision(detected, b, target) {
      if (detected) {
        this.hp = mutualcollision(b, target);
        console.log("xxxxxx", this.hp);
      }
    }
  }]);
  return BB;
}();

function mutualcollision(b, target) {
  var state = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var bb1 = b;
  var gb1 = target;
  var dx2 = Math.pow(gb1.x - bb1.x, 2);
  var dy2 = Math.pow(gb1.y - bb1.y, 2);
  var d = Math.sqrt(dx2 + dy2);
  var hp = bb1.hp;
  if (d < gb1.r + bb1.r) {
    console.log("撞到惹");
    hp = hp - 10;
    console.log("----> after collision ", state.bb1.hp);
  }
  console.log("dfdfdfdffdfdfdf", hp);
  return hp;
}

__$styleInject("canvas{background:#000}", undefined);

document.getElementById("root").innerHTML = "gm5 - A ball collision game";
var canvas = document.getElementById("gm5");
var ctx = canvas.getContext("2d");

// record ball position states


var gb1 = new GB(ctx, 100, 50);
var gb2 = new GB(ctx, 80, 40);
var bb1 = new BB(ctx, 50, 100, 20, "red", 100);
var mybb1 = new BB(ctx, 30, 30, 30, "yellow", 100);

//simple time
var cancelId = null;

// let state = {
//   gb1: { x: gb1.gb_x, y: gb1.gb_y, r: gb1.gb_r },
//   gb2: { x: gb2.gb_x, y: gb2.gb_y, r: gb2.gb_r },
//   bb1: { x: bb1.bb_x, y: bb1.bb_y, r: bb1.bb_r, hp: bb1.hp },
//   mybb1: { x: mybb1.bb_x, y: mybb1.bb_y, r: mybb1.bb_r, hp: mybb1.hp },
// };


function start() {
  clear(ctx);
  gb1.render(ctx);
  gb2.render(ctx);
  console.log("bb1.hp-------> ", bb1.hp);
  bb1.hp > 0 ? bb1.render(ctx) : null;
  mybb1.hp > 0 ? mybb1.render(ctx) : null;
  bb1.hp > 0 ? bb1.collision(true, bb1, gb1) : null;
  cancelId = requestAnimationFrame(start);
}

start();

// when to end?
// cancelAnimationFrame(cancelId);
// hp  100 -> 150 => win
// hp  100 -> 0  => lose

}());
